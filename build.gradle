plugins {
    id 'java-library'
    id 'maven-publish'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'net.smoofyuniverse.dependency-exporter' version '1.0.7'
    id 'com.diffplug.spotless' version '6.23.1'
}

group 'net.smoofyuniverse'
version = '1.4.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

sourceSets {
    main7
    main {
        compileClasspath += main7.output
    }
}

compileMain7Java {
    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'
}

jar {
    from sourceSets.main7.output
}

repositories {
    mavenCentral()
}

def generateJavaFXDeps = false

configurations {
    loggerImpl
    implementation.extendsFrom loggerImpl

    if (generateJavaFXDeps) {
        javaFXRuntime {
            transitive = false
        }
    }
}

dependencyExport {
    loggerImpl {
        path = "dep/logger.json"
        config = configurations.loggerImpl
    }

    if (generateJavaFXDeps) {
        javafx {
            path = "dep/javafx.json"
            config = configurations.javaFXRuntime
            presetOpenJFX()
        }
    }
}

javafx {
    version = '21.0.1'
    modules = ['javafx.controls']
    configuration = 'compileOnly'
}

dependencies {
    api 'org.slf4j:slf4j-api:2.0.9'
    api 'com.grack:nanojson:1.7'

    loggerImpl 'org.apache.logging.log4j:log4j-core:2.22.0'
    loggerImpl('org.apache.logging.log4j:log4j-slf4j2-impl:2.22.0') {
        exclude group: "org.slf4j", module: "slf4j-api"
    }

    if (generateJavaFXDeps) {
        for (classifier in dependencyExport.javafx.constraints.names) {
            for (name in ["base", "graphics", "controls"]) {
                javaFXRuntime 'org.openjfx:javafx-' + name + ':21.0.1:' + classifier
            }
        }
    }

    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
}

test {
    useJUnitPlatform()
}

spotless {
    ratchetFrom 'origin/master'

    java {
        licenseHeaderFile(rootProject.file('HEADER'))
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'appcommon'
            from components.java

            pom {
                name = 'AppCommon'
                packaging = 'jar'
                description = "Common library for JavaFX applications."
                url = 'https://github.com/Yeregorix/AppCommon'

                scm {
                    connection = 'scm:git:https://github.com/Yeregorix/AppCommon.git'
                    developerConnection = 'scm:git:https://github.com/Yeregorix/AppCommon.git'
                    url = 'https://github.com/Yeregorix/AppCommon'
                }

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id = 'Yeregorix'
                        name = 'Hugo Dupanloup'
                        email = 'yeregorix@smoofyuniverse.net'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            url = version.endsWith('SNAPSHOT') ?
                    "https://oss.sonatype.org/content/repositories/snapshots/"
                    : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

            credentials {
                username findProperty('ossrhUsername')
                password findProperty('ossrhPassword')
            }
        }
    }
}

if (project.hasProperty("signing.keyId")) {
    apply plugin: 'signing'
    signing {
        sign publishing.publications.mavenJava
    }
}
